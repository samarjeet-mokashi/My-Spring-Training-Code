package com.boa.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;

import com.boa.entity.Admin;
import com.boa.entity.Course;
import com.boa.entity.Professor;
import com.boa.entity.Student;
import com.boa.repository.AdminRepository;
import com.boa.repository.CourseRepository;
import com.boa.repository.ProfessorRepository;
import com.boa.repository.StudentRepository;

@Service
public class AdminService {

	@Autowired
	private AdminRepository adminRepository;

	@Autowired
	private StudentRepository studentRepository;

	@Autowired
	private ProfessorRepository professorRepository;

	@Autowired
	private CourseRepository courseRepository;

	public List<Admin> getAllAdmins() {
		return adminRepository.findAll();
	}

	public Admin addAdmin(@RequestBody Admin Admin) {
		return adminRepository.save(Admin);
	}

	public Admin getAdminById(@PathVariable Long id) {
		return adminRepository.findById(id).orElse(null);
	}

	public Admin updateAdmin(@PathVariable Long id, @RequestBody Admin updatedAdmin) {
		if (adminRepository.existsById(id)) {
			updatedAdmin.setId(id);
			return adminRepository.save(updatedAdmin);
		}
		return null;
	}

	public void deleteAdmin(@PathVariable Long id) {
		adminRepository.deleteById(id);
	}

	/*--------Student-----------*/

	public List<Student> getAllStudents() {
		return studentRepository.findAll();
	}

	public Student addStudent(@RequestBody Student Student) {
		return studentRepository.save(Student);
	}

	public Student getStudentById(@PathVariable Long id) {
		return studentRepository.findById(id).orElse(null);
	}

	public Student updateStudent(@PathVariable Long id, @RequestBody Student updatedStudent) {
		if (studentRepository.existsById(id)) {
			updatedStudent.setId(id);
			return studentRepository.save(updatedStudent);
		}
		return null;
	}

	public void deleteStudent(@PathVariable Long id) {
		studentRepository.deleteById(id);
	}

	/*-------Professor-----------*/

	public List<Professor> getAllProfessors() {
		return professorRepository.findAll();
	}

	public Professor addProfessor(@RequestBody Professor Professor) {
		return professorRepository.save(Professor);
	}

	public Professor getProfessorById(@PathVariable Long id) {
		return professorRepository.findById(id).orElse(null);
	}

	public Professor updateProfessor(@PathVariable Long id, @RequestBody Professor updatedProfessor) {
		if (professorRepository.existsById(id)) {
			updatedProfessor.setId(id);
			return professorRepository.save(updatedProfessor);
		}
		return null;
	}

	public void deleteProfessor(@PathVariable Long id) {
		professorRepository.deleteById(id);
	}

	/*-----------Course----------*/

	public List<Course> getAllCourses() {
		return courseRepository.findAll();
	}

	public Course addCourse(@RequestBody Course Course) {
		return courseRepository.save(Course);
	}

	public Course getCourseById(@PathVariable Long id) {
		return courseRepository.findById(id).orElse(null);
	}

	public Course updateCourse(@PathVariable Long id, @RequestBody Course updatedCourse) {
		if (courseRepository.existsById(id)) {
			updatedCourse.setCourseId(id);
			return courseRepository.save(updatedCourse);
		}
		return null;
	}

	public void deleteCourse(@PathVariable Long id) {
		courseRepository.deleteById(id);
	}

	/*-------Report-----------*/

	public Professor generateReportById(@PathVariable Long id) {
		return professorRepository.findById(id).orElse(null);
	}

}
