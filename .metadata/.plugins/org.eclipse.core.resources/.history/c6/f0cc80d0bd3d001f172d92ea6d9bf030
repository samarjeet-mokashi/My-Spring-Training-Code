package com.boa.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.boa.model.Customer;

@RestController
@RequestMapping("/customerApi")
public class CustomerController {
	
	
	private static ArrayList<Customer> custList = new ArrayList<>();
    // static initializer called when class is loaded
	static {
		custList = new ArrayList<>();
		custList.add(new Customer(1, "Name1", "Address1"));
		custList.add(new Customer(2, "Name2", "Address2"));
	}

	public static List<Customer> getCustomers() {
		return custList;
	}

	public static int getNextId() {
		return custList.stream().mapToInt(b -> b.getCustomerID()).max().getAsInt() + 1;
	}
	
	
	// using request mapping method impl

		@RequestMapping(value = "/detailsCustomer", produces = MediaType.APPLICATION_JSON_VALUE,
				method = RequestMethod.GET)
		public Customer getAllCustomerDetails() {

			// set some data here hard coded
			// later look up by the service to JPA

			Customer customer = new Customer();
			customer.setCustomerID(101);
			customer.setCustomerName("BOA");
			customer.setCustomerAddress("Gurgaon");

			return customer;
		}
		
		
		
		@GetMapping("/getCustomerDetails/{id}")
		public String getCustomerDetails(@PathVariable int id) {
	        Optional <Customer> book = books.stream().filter(b -> b.getId() == id).findAny();
			if (!book.isPresent())
				throw new NotFoundException(); // sends 404 to client 
			Gson gson = new Gson();
			return gson.toJson(book.get());
		}

		@PUT
		@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
		public void updateBook(@FormParam("id") int id, @FormParam("price") double price) {
			Optional<Book> book = books.stream().filter(b -> b.getId() == id).findAny();
			if (!book.isPresent())
				throw new NotFoundException();

			book.get().setPrice(price);
		}

		@DELETE
	        @Path("{id}")
		public void deleteBook(@PathParam("id") int id) {
			 for(Book b : books) {
				 if ( b.getId() == id) {
					 books.remove(b);
					 return;
				 }
			 }

			 // if no book is found then throw exception 
	                 throw new NotFoundException();
		}

		@POST
		@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
		public void addBook(@FormParam("title") String title, @FormParam("price") double price) {
			int id = Books.getNextId();
			Book book = new Book(id, title, price);
			books.add(book);
		}

}
