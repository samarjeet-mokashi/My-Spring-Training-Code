package com.boa.restcontroller;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import com.boa.entity.Admin;
import com.boa.entity.Professor;
import com.boa.entity.Student;
import com.boa.repository.AdminRepository;
import com.boa.repository.ProfessorRepository;
import com.boa.repository.StudentRepository;

import java.util.List;

@RestController
@RequestMapping("/admin")
public class AdminController {

	@Autowired
    private AdminRepository adminRepository;
    
	@Autowired
    private StudentRepository studentRepository;
    
	@Autowired
    private ProfessorRepository professorRepository;

    @GetMapping  // request mapping  change 
    public List<Admin> getAllAdmins() {
        return adminRepository.findAll();
    }

    @PostMapping
    public Admin addAdmin(@RequestBody Admin Admin) {
        return adminRepository.save(Admin);
    }

    @GetMapping("/{id}")
    public Admin getAdminById(@PathVariable Long id) {
        return adminRepository.findById(id).orElse(null);
    }

    @PutMapping("/{id}")
    public Admin updateAdmin(@PathVariable Long id, @RequestBody Admin updatedAdmin) {
        if (adminRepository.existsById(id)) {
            updatedAdmin.setId(id);
            return adminRepository.save(updatedAdmin);
        }
        return null;
    }

    @DeleteMapping("/{id}")
    public void deleteAdmin(@PathVariable Long id) {
    	adminRepository.deleteById(id);
    }
    
    
    
    --------Student
    
    @GetMapping  // request mapping  change 
    public List<Student> getAllStudents() {
        return studentRepository.findAll();
    }

    @PostMapping
    public Student addStudent(@RequestBody Student Student) {
        return studentRepository.save(Student);
    }

    @GetMapping("/{id}")
    public Student getStudentById(@PathVariable Long id) {
        return studentRepository.findById(id).orElse(null);
    }

    @PutMapping("/{id}")
    public Student updateStudent(@PathVariable Long id, @RequestBody Student updatedStudent) {
        if (studentRepository.existsById(id)) {
            updatedStudent.setId(id);
            return studentRepository.save(updatedStudent);
        }
        return null;
    }

    @DeleteMapping("/{id}")
    public void deleteStudent(@PathVariable Long id) {
    	studentRepository.deleteById(id);
    }
    
    
    -------Professor
    
    
    @GetMapping  // request mapping  change 
    public List<Professor> getAllProfessors() {
        return professorRepository.findAll();
    }

    @PostMapping
    public Professor addProfessor(@RequestBody Professor Professor) {
        return professorRepository.save(Professor);
    }

    @GetMapping("/{id}")
    public Professor getProfessorById(@PathVariable Long id) {
        return professorRepository.findById(id).orElse(null);
    }

    @PutMapping("/{id}")
    public Professor updateProfessor(@PathVariable Long id, @RequestBody Professor updatedProfessor) {
        if (professorRepository.existsById(id)) {
            updatedProfessor.setId(id);
            return professorRepository.save(updatedProfessor);
        }
        return null;
    }

    @DeleteMapping("/{id}")
    public void deleteProfessor(@PathVariable Long id) {
    	professorRepository.deleteById(id);
    }
}

